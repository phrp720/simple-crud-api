basePath: /api/v1
definitions:
  BaseProduct:
    description: Represents a product in the inventory with all its details
    properties:
      availability:
        type: boolean
      description:
        type: string
      id:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
  ChangedProduct:
    description: Represents the details of a product to be changed in the inventory
    properties:
      product:
        $ref: '#/definitions/UpdateProduct'
    required:
    - product
    type: object
  CreatedProduct:
    description: Represents the details of a new product to be created in the inventory
    properties:
      availability:
        type: boolean
      description:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    required:
    - name
    - sku
    type: object
  Products:
    description: Represents a list of new products to be created in the inventory
    properties:
      products:
        items:
          $ref: '#/definitions/CreatedProduct'
        type: array
    required:
    - products
    type: object
  UpdateProduct:
    description: Represents the details of a product that are to be updated in the
      inventory
    properties:
      availability:
        type: boolean
      description:
        type: string
      image:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: filippospapadakis1@gmail.com
    name: Phillip Rafail Papadakis
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Simple RESTful CRUD API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Retrieve all products with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/BaseProduct'
            type: array
      summary: Get all products
      tags:
      - products
  /products/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BaseProduct'
      summary: Get a product
      tags:
      - products
  /products/bulk/delete:
    delete:
      consumes:
      - application/json
      description: Delete multiple products by IDs
      parameters:
      - description: Product IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "products deleted successfully"}'
      summary: Delete multiple products
      tags:
      - products
  /products/create:
    post:
      consumes:
      - application/json
      description: Create new products
      parameters:
      - description: Products
        in: body
        name: products
        required: true
        schema:
          $ref: '#/definitions/Products'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "Product created Successfully"}'
      summary: Create multiple products
      tags:
      - products
  /products/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": ""product deleted successfully"}'
        "404":
          description: '{"error": "product does not exist"}'
      summary: Delete a product
      tags:
      - products
  /products/update/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ChangedProduct'
      produces:
      - application/json
      responses:
        "200":
          description: '{"message": "product with id ${id} updated successfully"}'
      summary: Update a product
      tags:
      - products
swagger: "2.0"
